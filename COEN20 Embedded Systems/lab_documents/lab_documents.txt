Lab1:

You may use any C compiler to write the program, but you must demonstrate your program to the TA, let him test it with whatever input values he chooses, and (if approved) upload your source code to Camino.

For decimal input values in the range ...
-128 to -1:  Display the 2's complement signed representation and label it as "2's complement".
0 to +127:  Display the â€‹8-bit representation and label it as "both unsigned and 2's complement"
128 to 255: Display the unsigned representation and label it as "unsigned".
Any other value:  Display "out of range" and terminate the program.


Lab2:

Part 1: Build and test the sample program in Listing 3-1 on page 43. Demonstrate proper operation of the program to the TA. Do NOT turn in (i.e., do not upload) this program.

Part 2: Problem 5 at the end of Chapter 3. Demonstrate proper operation of the program to the TA, then upload your C and assembly language source code.  The main program should simply simply call function PrintTwo, giving it a format string and an integer as the first and second parameters of the function.
int main(void)
{
InitializeHardware(HEADER, PROJECT_NAME);
PrintTwo("numb=%d\n", 10) ;
return 0 ; 
}

Function PrintTwo (written in assembly by you), makes two function calls to library function printf.  If PrintTwo were written in C, it would look like this: 
void PrintTwo(char *format, int32_t numb)
{
printf(format, numb) ;
printf(format, numb + 1) ;
}


Lab3:

Write a program as a combination of C and ARM Cortex-M4 assembly that runs on the small single board computers in our lab. The main program (written in C) should call a function (written in assembly) that returns a pointer to the item at row r, column c of a two-dimensional array of 32-bit integers stored in row major format.

For example, a 3x3 array where the first subscript is the row and the second is the column would be stored as a sequence of items at increasing address locations in memory.  If each item of the array is a 32-bit integer, and the array starts at address 1000, then the address of a[1][2] should be 1020 (decimal).

a[0][0]  	a[0][1]  	a[0][2]  	a[1][0]  	a[1][1]  	a[1][2]  	a[2][0]  	a[2][1]  	a[2][2]
Parameter "p" is a pointer to the starting address of the array. The number of items in each row is given by "cols". Parameters "r" and "c" are the row and column of interest. Write a C program to test your function. The function prototype is:

void *pWord(void *p, uint32_t cols, uint32_t r, uint32_t c) ;

Your main program should call the function several times in a loop to display the addresses of all the elements of the array. Test your program with two arrays:

int32_t a32[4][2] ;  // 4 rows of 2 columns each, 32-bit objects

int32_t b32[2][4] ;  // 2 rows of 4 columns each, 32-bit objects

Demo your program to the TA and then upload the assembly source code to Camino.

Hint: Multiplication by a power of 2 can be accomplished using an LSL instruction:

// Replace R1 by a copy of R2 that has been shifted left R3 times:

LSL  R1,R2,R3  // R1 <-- R2 << R3 


Lab4:

Write a function in ARM Cortex-M4 assembly to compute the modulus function using the single board computer in the lab.

The function must implement the following function prototype:

 uint32_t Modulus(int32_t number, uint32_t divisor) ;  // Assume that "divisor" is never zero.

Note: The modulus is NOT the same as the remainder when number is negative! (I.e., the value returned by the function must always be positive. One approach to solve this is the following (where "%" computes the remainder):

 modulus = ((number % divisor) + divisor) % divisor ;

The above C code would of course have to be converted into ARM assembly and implemented as the function Modulus.

The C program call the modulus function for several test cases, including the following values for parameters "number" and "divisor". The table illustrates the correct result as well as how it differs from the remainder.

number	divisor	modulus	remainder
+7	5	2	2
+6	2	0	0
-5	3	1	-2
-4	6	2	-4


Lab5:

Implement a function in ARM assembly language to implement the function described in problem 5 at the end of Chapter 6 on page 114. Use the attached short C test program that calls the function, giving it an array of 32-bit signed integers and the count of entries in the array ("minimum" refers to the value in the array that is closest to negative infinity).

Your assembly function will incorporate a loop to sequence through all of the items in the array, looking for the minimum value. Within the loop, you will need to compare the current minimum value to the current item; if the current item is less than the current minimum, the current minimum must be replaced. Do this compare and replacement using an IT block.


Lab6:

You are to implement the two functions (BFI and UBFX) described in Programming Problems 3b and 3d in the Green Book (Problems 4 and 6 in the Blue Book) at the end of Chapter 7. You will test your functions using the C main program in file TestBitFields.c that can be downloaded from:

http://www.cse.scu.edu/~dlewis/book3/code

Note: You are not allowed to use any of the following instructions in your solution:

BFI, BFC, SBFX, UBFX, CLZ, RBIT, REV, REV16, REVSH, SXTB, SXTH, UXTB, UXTH.

Demonstrate your program to the TA. Once approved, upload the source code of your assembly language to Camino. Do NOT upload any of the C code since it was provided to you.


Lab7:

Write a function in ARM assembly language to implement the Remainder function described in problem 7 at the end of Chapter 8 on page 147. Your function MUST be consistent with the function prototype given in the problem description:

int32_t  Remainder(int32_t s32, int32_t k) ;

Your solution must NOT use a divide instruction (SDIV or UDIV), but instead must be based on a bitwise AND. Note that the AND produces the modulus, not the remainder, so you will need to adjust the result when the dividend is negative.


Lab8:

You are to implement the polynomial function described in Programming Problem 3 at the end of Chapter 9. You will test your function using the C main program in file TestPolynomial.c that can be downloaded from:

http://www.cse.scu.edu/~dlewis/book3/code

Demonstrate your program to the TA. Once approved, upload the source code of your assembly language to Camino. Do NOT upload any of the C code since it was provided to you.


Lab9:

You are to re-implement the polynomial function from the previous lab, but this time using Q32 fixed-point reals instead of floating point. The function prototype for the fixed-point polynomial function is:

typedef int64_t Q32 ;
Q32 Q32Poly(Q32 x, Q32 coefficients[], int32_t terms) ;

Use Q32Poly.s as the name of your assembly language source code of the function. Test your function using the C main program in file TestQ32.c and the Q32 fixed-point product in file Q32Product.s. Both of these two files can be downloaded from:

http://www.cse.scu.edu/~dlewis/book3/code

Demonstrate your program to the TA. Once approved, upload the source code of Q32Poly.s to Camino. Do NOT upload either of the other files that were provided to you.